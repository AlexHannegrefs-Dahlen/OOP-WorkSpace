package tic.tac.toe.view;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import tic.tac.toe.controller.Tic_Tac_Toe;
import tic.tac.toe.model.board.Board;
import tic.tac.toe.model.player.Player;

public class GUI {
	private static int buttonSelector = 0;
	private static JFrame frame;
	private static JPanel mainPanel;
	private static JButton squareOne, squareTwo, squareThree, squareFour, squareFive, squareSix, squareSeven,
			squareEight, squareNine;
	private static JButton[] buttons;

	private static JMenuItem New, Save, Load, Exit;
	private static JMenuItem[] menuOptions;
	private static JMenu Options;
	private static JMenuBar menuBar;
	private static Tic_Tac_Toe game;

	/**
	 * checks if player wants to play again
	 * 
	 * @return true if Yes is clicked, false if No is clicked
	 */
	public static boolean checkPlayAgian() {
		if (JOptionPane.showConfirmDialog(frame, "Play Again?", "End Game", JOptionPane.YES_NO_OPTION) == 0)
			return true;
		else
			return false;

	}

	/**
	 * initializes a new tic tac toe GUI
	 */
	public static void initGUI() {
		frame = new JFrame("Tic Tac Toe");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(400, 600);
		frame.setLocationRelativeTo(null);
		mainPanel = new JPanel(new GridLayout(0, 3));
		squareOne = new JButton();
		squareTwo = new JButton();
		squareThree = new JButton();
		squareFour = new JButton();
		squareFive = new JButton();
		squareSix = new JButton();
		squareSeven = new JButton();
		squareEight = new JButton();
		squareNine = new JButton();
		buttons = new JButton[] { squareOne, squareTwo, squareThree, squareFour, squareFive, squareSix, squareSeven,
				squareEight, squareNine };
		for (int i = 0; i < buttons.length; i++) {
			mainPanel.add(buttons[i]);
		}
		for (int i = 0; i < buttons.length; i++) {
			buttons[i].addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (e.getSource() == squareOne)
						setButtonSelector(1);
					else if (e.getSource() == squareTwo)
						setButtonSelector(2);
					else if (e.getSource() == squareThree)
						setButtonSelector(3);
					else if (e.getSource() == squareFour)
						setButtonSelector(4);
					else if (e.getSource() == squareFive)
						setButtonSelector(5);
					else if (e.getSource() == squareSix)
						setButtonSelector(6);
					else if (e.getSource() == squareSeven)
						setButtonSelector(7);
					else if (e.getSource() == squareEight)
						setButtonSelector(8);
					else if (e.getSource() == squareNine)
						setButtonSelector(9);
				}
			});
		}

		New = new JMenuItem("New Game");
		Load = new JMenuItem("Load Game");
		Save = new JMenuItem("Save Game");
		Exit = new JMenuItem("Exit Game");
		menuOptions = new JMenuItem[] { New, Load, Save, Exit };
		for (int i = 0; i < menuOptions.length; i++) {
			menuOptions[i].addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					if (e.getSource() == New) {
						if (checkPlayAgian()) {
							try {
								game.run();
							} catch (InterruptedException e1) {
								e1.printStackTrace();
							}
						}
					} else if (e.getSource() == Load) {

					} else if (e.getSource() == Save) {

					} else if (e.getSource() == Exit) {
						game.endGame();
					}

				}
			});
		}
		menuBar = new JMenuBar();
		Options = new JMenu("Menu");
		Options.add(New);
		Options.add(Load);
		Options.add(Save);
		Options.add(Exit);
		menuBar.add(Options);
		frame.add(mainPanel);
		frame.setJMenuBar(menuBar);
	}

	/**
	 * Updates the text on the button to what the boardspaces symbols are
	 * 
	 * @param gameBoard
	 * @param playerX
	 */
	public static void buttonUpdater(Board gameBoard, Player playerX) {
		for (int i = 0; i < buttons.length; i++) {
			if (gameBoard.getBoardspaces()[i].getSymbol() instanceof Player) {
				if (gameBoard.getBoardspaces()[i].getSymbol() == playerX) {
					buttons[i].setText("X");
				} else {
					buttons[i].setText("O");
				}
			}
		}
	}

	/**
	 * Alerts the players of who turn it is
	 * 
	 * @param playerX
	 */
	public static void PlayersTurn(Player playerX) {
		if (playerX.isTurn())
			JOptionPane.showMessageDialog(frame, "Player X's turn");
		else
			JOptionPane.showMessageDialog(frame, "Player O's turn");

	}

	/**
	 * Shows message to user on a JOptionPane
	 * 
	 * @param message
	 */
	public static void displayMessageDialog(String message) {
		JOptionPane.showMessageDialog(frame, message);
	}

	/**
	 * Displays the JFrame
	 */
	public static void showGUI() {
		frame.setVisible(true);
	}

	/**
	 * @return the buttonSelector
	 */
	public static int getButtonSelector() {
		return GUI.buttonSelector;
	}

	/**
	 * @param buttonSelector
	 *            the buttonSelector to set
	 */
	public static void setButtonSelector(int buttonSelector) {
		GUI.buttonSelector = buttonSelector;
	}
}
