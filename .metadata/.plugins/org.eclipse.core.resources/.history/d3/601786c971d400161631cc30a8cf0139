package com.hoglezoo.animals;

import java.util.Random;

/**
 * 
 * @author Alex
 *
 */
public class Safari {
	private String name;
	private boolean carnivore;
	private double travelSpeed;
	private String speak;

	/**
	 * 
	 */
	public Safari() {

	}

	public Safari(String name, boolean carnivore, double travelSpeed, String speak) {
		this.setName(name);
		this.setCarnivore(carnivore);
		this.setTravelSpeed(travelSpeed);
		this.setSpeak(speak);
	}

	public boolean equals(Object obj) {
		Safari equal = (Safari) obj;
		return (this.isCarnivore() == equal.isCarnivore() && this.getTravelSpeed() == equal.getTravelSpeed()
				&& this.getSpeak() == equal.getSpeak());
	}

	private int numberGen() {
		Random gen = new Random();
		return gen.nextInt(2);
	}

	/**
	 * 
	 * @param Jungle
	 *            object to fight Safari
	 */
	public void fight(Jungle fighting) {
		if (numberGen() == 1) {
			System.out.println(fighting.toString() + " wins");
		}
		System.out.println(this.toString() + " wins");
	}

	/**
	 * 
	 * @param Ocean
	 *            object to fight Safari
	 */
	public void fight(Ocean fighting) {
		if (numberGen() == 1) {
			System.out.println(fighting.getName() + " wins");
		}
		System.out.println(this.getName() + " wins");
	}

	/**
	 * 
	 * @param Arctic
	 *            object to fight Safari
	 */
	public void fight(Arctic fighting) {
		if (numberGen() == 1) {
			System.out.println(fighting.getName() + " wins");
		}
		System.out.println(this.getName() + " wins");
	}

	/**
	 * 
	 * @param Safari
	 *            object to fight Safari
	 */
	public void fight(Safari fighting) {
		if (numberGen() == 1) {
			System.out.println(fighting.getName() + " wins");
		}
		System.out.println(this.getName() + " wins");
	}

	/**
	 * 
	 * @return
	 */
	public String getName() {
		return name;
	}

	/**
	 * 
	 * @param name
	 */
	public void setName(String name) {
		if (name == null) {
			throw new IllegalArgumentException("Name cannot be null");
		}
		this.name = name;
	}

	/**
	 * @return the speak
	 */
	public String getSpeak() {
		return speak;
	}

	/**
	 * @param speak
	 *            the speak to set
	 */
	public void setSpeak(String speak) {
		if (speak == null)
			throw new IllegalArgumentException("Speak cannot be null");
		this.speak = speak;
	}

	/**
	 * @return the carnivore
	 */
	public boolean isCarnivore() {
		return carnivore;
	}

	/**
	 * @param carnivore
	 *            the carnivore to set
	 */
	public void setCarnivore(boolean carnivore) {
		this.carnivore = carnivore;
	}

	/**
	 * @return the travelSpeed
	 */
	public double getTravelSpeed() {
		return travelSpeed;
	}

	/**
	 * @param travelSpeed
	 *            the travelSpeed to set
	 */
	public void setTravelSpeed(double travelSpeed) {
		if (travelSpeed < 0)
			throw new IllegalArgumentException("travelSpeed cannot be less than 0");
		this.travelSpeed = travelSpeed;
	}
}
