package com.hoglezoo.animals;

abstract public class Animal implements AnimalType, Comparable<Animal> {
	private String name;
	protected String speak;
	private String color;
	private int attack;

	public Animal() {

	}

	public Animal(String name, String color, String speak, int attack) {
		this.setName(name);
		this.setColor(color);
		this.setSpeak(speak);
		this.setAttack(attack);
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Animal)) {
			throw new IllegalArgumentException("obj must be an animal instance");
		}
		Animal equalling = (Animal) obj;
		return this.getName() == equalling.getName() && this.getColor() == equalling.getColor()
				&& this.getSpeak() == equalling.getSpeak() && this.getAttack() == equalling.getAttack();
	}

	@Override
	public String toString() {
		return "Name: " + this.getName() + ", Speak: " + this.getSpeak() + ", Color: " + this.getColor();
	}

	/**
	 * 
	 */
	public void eat() {
		System.out.println(this.name + " has ate.");
	}

	/**
	 * 
	 */
	public void hide() {
		System.out.println(this.name + " is hiding.");
	}

	/**
	 * 
	 * @param Anial
	 *            object to fight another Animal object
	 * 
	 */
	public Animal fight(Animal fighting) {
		if (this.getAttack() < fighting.getAttack())
			return fighting;
		else
			return this;
	}

	/**
	 * 
	 * @return
	 */
	public String getName() {
		return name;
	}

	/**
	 * 
	 * @param name
	 */
	public void setName(String name) {
		if (name == null) {
			throw new IllegalArgumentException("Name cannot be null");
		}
		this.name = name;
	}

	/**
	 * @return the speak
	 */
	abstract public String getSpeak();

	/**
	 * @param speak
	 *            the speak to set
	 */
	public void setSpeak(String speak) {
		if (speak == null) {
			throw new IllegalArgumentException("Speak cannot be null");
		}
		this.speak = speak;
	}

	/**
	 * @return the color
	 */
	public String getColor() {
		return color;
	}

	/**
	 * @param color
	 *            the color to set
	 */
	public void setColor(String color) {
		this.color = color;
	}

	/**
	 * @return the attack
	 */
	public int getAttack() {
		return attack;
	}

	/**
	 * @param attack
	 *            the attack to set
	 */
	public void setAttack(int attack) {
		if (attack < 0) {
			throw new IllegalArgumentException("attack cannot be less than 0");
		}
		this.attack = attack;
	}
}
