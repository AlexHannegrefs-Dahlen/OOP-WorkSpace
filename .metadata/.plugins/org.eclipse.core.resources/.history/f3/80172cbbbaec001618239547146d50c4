package tic.tac.toe.view;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import tic.tac.toe.model.board.Board;
import tic.tac.toe.model.player.Player;

public class GUI implements ActionListener {
	private static int buttonSelector = 0;
	private static JFrame frame;
	private static JPanel mainPanel;
	private static JButton squareOne, squareTwo, squareThree, squareFour, squareFive, squareSix, squareSeven,
			squareEight, squareNine;
	private static JButton[] buttons;

	public static void initGUI() {
		frame = new JFrame("Tic Tac Toe");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mainPanel = new JPanel(new GridLayout(0, 3));
		squareOne = new JButton();
		squareTwo = new JButton();
		squareThree = new JButton();
		squareFour = new JButton();
		squareFive = new JButton();
		squareSix = new JButton();
		squareSeven = new JButton();
		squareEight = new JButton();
		squareNine = new JButton();
		buttons = new JButton[] { squareOne, squareTwo, squareThree, squareFour, squareFive, squareSix, squareSeven,
				squareEight, squareNine };
		for (int i = 0; i < buttons.length; i++) {
			mainPanel.add(buttons[i]);
		}
		frame.add(mainPanel);
	}

	public static void buttonUpdater(Board gameBoard) {
		for (int i = 0; i < buttons.length; i++) {
			buttons[i].setIcon((Icon) gameBoard.getBoardspaces()[i]);
		}
	}

	public static void PlayersTurn(Player playerX) {
		if (playerX.isTurn())
			JOptionPane.showMessageDialog(frame, "Player X's turn");
		else
			JOptionPane.showMessageDialog(frame, "Player O's turn");

	}

	public static void showGUI() {
		frame.setVisible(true);
	}

	/**
	 * @return the buttonSelector
	 */
	public static int getButtonSelector() {
		return buttonSelector;
	}

	/**
	 * @param buttonSelector
	 *            the buttonSelector to set
	 */
	public static void setButtonSelector(int buttonSelector) {
		GUI.buttonSelector = buttonSelector;
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		if (e.getSource() == squareOne) {
			buttonSelector = 1;
		}

	}
}
